#!/usr/bin/env node

//Dependencies and argument details
var fs = require("fs"),
    path = require("path"),
    home = require("userhome"),
    notifier = require("./lib/notifier.js"),
    _ = require("underscore"),
    program = require("commander"),
    taskPath = home(".stakeout"),
    tasks;

// Populate the existing task list
try {
  tasks = JSON.parse(fs.readFileSync(taskPath,{encoding:"utf8"}));
} catch(e) {
  tasks = {};
}

// Set up commands
program.command("list")
  .description("List existing stakeout tasks")
  .action(list);

program.command("add <task> [description]")
  .description("Create a new stakeout/task, with an optional description.  The task name should only use alphanumeric characters, dashes, and underscores.")
  .action(add);

program.command("watch <task> <email/username>")
  .description("Add an email or slack channel/username to be notified for a task.")
  .action(watch);

program.command("remove <task>")
  .description("Remove a task from stakeout.")
  .action(remove);

program.command("unwatch <task>  <email/username>")
  .description("Stop notifying an email or slack channel/username for a task.")
  .action(unwatch);

program.command("rename <old task name> <new task name>")
  .description("Rename a task.")
  .action(rename);

program.command("run <task>")
  .description("Run a stakeout task once")
  .action(run);

// Catchall for unrecognized commands
program.command("*")
  .description("")
  .action(function(){
    program.help();
  });

program.parse(process.argv);

// No arguments
if (!program.args.length) {
  program.help();
}

// Run the specified task
function run(task) {

  var engine;

  if (!tasks[task]) {
    quit("Task " + task + " hasn't been created yet.");
  }

  // Require the module for this bot
  try {
    engine = require(path.join(__dirname,"bots",task));
  } catch(e) {
    quit(path.join("bots",task) + " module not found.");
  }

  // Get the current value
  var currentValue = tasks[task].value,
      firstRun = (currentValue === undefined);

  // Run the comparison, callback will include the new value to save
  // and a notification message, if one exists
  engine(currentValue,function(err,newValue,notification) {

    if (err) {
      quit(err);
    }

    tasks[task].value = newValue;

    saveTasks();

    // Don't notify on the first run
    if (notification && !firstRun) {

      console.log(notification);

      // Send Slack notifications
      tasks[task].notify.slack.forEach(function(channel){

        console.log("Slacking " + channel);

        notifier.slack({
          channel: channel,
          text: notification
        });

      });

      // Send emails
      if (tasks[task].notify.email.length) {

        console.log("Emailing ",tasks[task].notify.email);

        notifier.email({
          to: tasks[task].notify.email,
          subject: "Data News Bot notification for " + task,
          body: notification
        });

      }

    }

  });

}

// List all tasks
function list() {

  var entries = _.pairs(tasks).map(function(pair){

    // Combined recipient list
    var recipients = _.flatten(_.values(pair[1].notify));

    var lines = [pair[0],pair[0].replace(/./g,"=")];

    if (pair[1].description) {
      lines.push(pair[1].description);
    }

    if (recipients.length) {
      lines.push("Notifying: "+recipients.join(", "));
    } else {
      lines.push("No one is receiving notifications yet.");
    }

    return lines.join("\n");

  });

  if (!entries.length) {
    console.log("No tasks found.");
  } else {
    console.log("\n" + entries.join("\n\n") + "\n");
  }

}

// Create a new task
function add(task,description) {

  if (taskExists(task,true)) {
    quit("Task " + task + " already exists.");
  }

  if (!task) {
    program.help();
  }

  tasks[task] = {
    notify: {
      email: [],
      slack: []
    }
  };

  if (description) {
    tasks[task].description = description;
  }

  saveTasks("Created new task: " + task);

}

// Remove a task
function remove(task) {

  if (!taskExists(task)) {
    quit("Task " + task + " not found.");
  }

  delete tasks[task];

  saveTasks("Removed task: " + task);

}

// Remove a task
function rename(oldTask,newTask) {

  if (!taskExists(oldTask)) {
    quit("Task " + oldTask + " not found.");
  }

  if (taskExists(newTask,true)) {
    quit("Task " + newTask + " already exists.");
  }

  tasks[newTask] = tasks[oldTask];

  delete tasks[oldTask];

  saveTasks("Renamed " + oldTask + " to " + newTask);

}


// Add a watcher to a task
function watch(task,watcher) {

  if (!taskExists(task)) {
    quit("Task " + task + " not found");
  }

  if (!watcher) {
    program.help();
  }

  type = isSlack(watcher) ? "slack" : "email";

  tasks[task].notify[type].push(watcher);
  tasks[task].notify[type] = unique(tasks[task].notify[type]);

  saveTasks("Added " + watcher + " to receive " + task + " notifications.");

}

// Remove a watcher from a task
function unwatch(task,watcher) {

  if (!taskExists(task)) {
    quit("Task " + task + " not found");
  }

  if (!watcher) {
    program.help();
  }

  type = isSlack(watcher) ? "slack" : "email";

  tasks[task].notify[type] = tasks[task].notify[type].filter(function(w){
    return w.toLowerCase() !== watcher.toLowerCase();
  });

  saveTasks("Removed " + watcher + " from receiving " + task + " notifications.");

}

// Save the task file back out
// doing this sync in case there are multiple tasks running at once
// probably a bad idea. TODO: fix this
// log a message on success
function saveTasks(msg) {

  try {
    fs.writeFileSync(taskPath,JSON.stringify(tasks));
  } catch (e) {
    quit(e);
  }

  if (msg) {
    console.log(msg);
  }

}

// Is it a Slack username or channel?
function isSlack(watcher) {
  return watcher.match(/^[@|#]/);
}

// Get case-insensitive unique array
function unique(arr) {
  return _.uniq(arr,function(d){
    return d.toLowerCase();
  });
}

// Check whether a task already exists
function taskExists(task,caseInsensitive) {

  if (!caseInsensitive) {

    return tasks[task] !== undefined;

  }

  var lower = task.toLowerCase(),
      found;

  for (var key in tasks) {
    if (key.toLowerCase() === lower) {
      return true;
    }
  }

  return false;

}

// Error out without a throw-style stack trace
function quit(msg) {
  console.warn(msg);
  process.exit(1);
}